import telebot
from con2 import BOT_TOKEN
from comm2 import starts, helper, search, question, raspisanie, authorization, \
    start_keyboard, announce, prep_raspisanie, prep_ismeneniya, poisk, prep_poisk
from data import db_session
from data.keys import Keys
from data.lesssons import Lesssons
from data.users import User
bot = telebot.TeleBot(BOT_TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    starts(message)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    db_session.global_init("db/logs.db")
    db_sess = db_session.create_session()

    authorized_user = db_sess.query(User).filter(User.user_id == message.from_user.id).first()
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        search(message)
    # !!!!!!!!!! –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è !!!!!!!!!!!
    # –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
    elif message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_—É—Ä–æ–∫–æ–≤':
        if authorized_user and authorized_user.about == '—É—á–µ–Ω–∏–∫':
            raspisanie(message, authorized_user.user_key, autharized_student=True)
        else:
            qu1 = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (–Ω–æ–º–µ—Ä –∏ –±—É–∫–≤—É)")
            bot.register_next_step_handler(qu1, prep_raspisanie)
    # %%%%%%%%%% –∑–∞–¥–∞–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—á—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã
    elif message.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        question(message)

    # |||||||||| –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è |||||||||||||
    elif message.text == '–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è':
        if authorized_user and authorized_user.about == '–∑–∞–≤—É—á':
            qu2 = bot.send_message(message.from_user.id,
                                   "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞ (—Å–ª–∏—Ç–Ω–æ), –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞, –∫–∞–±–∏–Ω–µ—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞")
            bot.register_next_step_handler(qu2, prep_ismeneniya)
        else:
            bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
                             reply_markup=start_keyboard(message.from_user.id))

    # //////// –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è /////////
    # –Ω–∞—á–∞–ª–æ –≤—Å–µ–π –∞—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    elif message.text == '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è':
        bot.send_message(message.from_user.id, "–ö—Ç–æ –≤—ã? (–ó–∞–≤—É—á/—É—á–∏—Ç–µ–ª—å/—É—á–µ–Ω–∏–∫)")
        # –ù–∏–∂–µ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏ –µ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–µ—Ä–Ω—É—Ç—å, –Ω –æ—Å –Ω–µ–π —Å—Ç–∞–Ω–µ—Ç —Å–ª–æ–∂–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç.–∫. –º—ã –Ω–µ
        # —Å–º–æ–∂–µ–º –∑–∞–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∞–∫–∫—É–Ω—Ç—ã –≤ –±–æ—Ç–µ
        '''if not authorized_user:
            bot.send_message(message.from_user.id, "–ö—Ç–æ –≤—ã? (–ó–∞–≤—É—á/—É—á–∏—Ç–µ–ª—å/—É—á–µ–Ω–∏–∫)")
        else:
            bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")'''

    elif message.text.lower() == '–∑–∞–≤—É—á':
        qu3_1 = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª—é—á")
        bot.register_next_step_handler(qu3_1, authorization)

    elif message.text.lower() == '—É—á–∏—Ç–µ–ª—å':
        qu3_2 = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª—é—á")
        bot.register_next_step_handler(qu3_2, authorization)

    elif message.text.lower() == '—É—á–µ–Ω–∏–∫':
        qu3_3 = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞ (–∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ)")
        bot.register_next_step_handler(qu3_3, authorization)
    # ........ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∞—Å—Å—É .........
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å—É':
        if authorized_user and authorized_user.about != '—É—á–µ–Ω–∏–∫':
            qu5 = bot.send_message(message.from_user.id,
                                   "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å")
            bot.register_next_step_handler(qu5, announce)

        elif authorized_user and authorized_user.about == '—É—á–µ–Ω–∏–∫':
            bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")

        else:
            bot.send_message(message.from_user.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
    # ?????????? —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ???????????
    # –≤—ã–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞, –Ω–∞–≤–µ—Ä–Ω–æ–µ
    elif message.text == '–ß—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç?':
        helper(message)
    # $$$$$$$$$$ –ø–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞ $$$$$$$$$$
    elif message.text == '–ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞':
        poisk1 = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω")
        bot.register_next_step_handler(poisk1, prep_poisk())

    elif message.text.split()[0] == '–ü–æ–∏—Å–∫':
        clas = (message.text.split())[1:]
        poisk(clas, message)
    # \\\\\\\\\\ –ø—Ä–æ—Å—Ç–æ, —á—Ç–æ–±—ã –±—ã–ª–æ \\\\\\\\\\\
    else:
        print(message.text.split())
        bot.send_message(message.from_user.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")


bot.polling(none_stop=True, interval=0)   # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å
