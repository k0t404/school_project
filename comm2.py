import logging

import telebot
import datetime
from datetime import datetime as dt
from con2 import BOT_TOKEN
from telebot import types
from data import db_session
from data.lessons import Lessons
from data.users import User
from data.changes import Changes
from data.keys import Keys
bot = telebot.TeleBot(BOT_TOKEN)


db_session.global_init("db/logs.db")


class KeyboardData:
    def __init__(self):
        self.user_id = ''
        self.class_to_work = ''
        self.day = ''
        self.lesson_pos = ''
        self.days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
        self.classes = None

    def create_classes(self):
        db_sess = db_session.create_session()
        lessons = db_sess.query(Lessons)
        classes = {'5': [], '6': [], '7': [], '8': [], '9': [], '10': [], '11': []}
        for thing in lessons:
            class_name = thing.class_letter
            if class_name not in classes[class_name.split()[0]]:
                classes[class_name.split()[0]].append(class_name)
        return classes


def gen_markup(options, key):
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 2
    for option in options:
        markup.add(types.InlineKeyboardButton(option, callback_data=f"{key}_{str(option)}"))
    return markup


def unpack(swl_thing):
    info = []
    for row in swl_thing:
        info.append(row)
    return info


def start_keyboard(user_pass):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if user_pass == '–∑–∞–≤—É—á':
        btn1 = types.KeyboardButton('–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏')
        btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        btn3 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        btn4 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å—É')
        btn5 = types.KeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
        btn6 = types.KeyboardButton('–ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞')
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    elif user_pass == '—É—á–∏—Ç–µ–ª—å':
        btn1 = types.KeyboardButton('–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏')
        btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        btn3 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å—É')
        btn4 = types.KeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
        btn5 = types.KeyboardButton('–ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞')
        markup.add(btn1, btn2, btn3, btn4, btn5)
    elif user_pass == '—É—á–µ–Ω–∏–∫':
        btn1 = types.KeyboardButton('–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏')
        btn2 = types.KeyboardButton('–ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞')
        btn3 = types.KeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
        btn4 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        markup.add(btn1, btn2, btn3, btn4)
    return markup


def starts(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –ê—Ä–∏–Ω–∞, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º!",
                     reply_markup=markup)
    bot.send_message(message.from_user.id,
                     "–ù–∞—Å—Ç–∞–∏–≤–∞—é –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!")


def redo(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "–î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π",
                     reply_markup=markup)


def search(message):
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ')


def question(message):
    bot.send_message(message.from_user.id, "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–π google —Ñ–æ—Ä–º–µ")
    bot.send_message(message.from_user.id, "https://forms.gle/TK1u2TP8jhei8fWa7")


def helper(message):
    bot.send_message(message.from_user.id, "–Ø - –±–æ—Ç –ê—Ä–∏–Ω–∞.")
    bot.send_message(message.from_user.id, "–Ø –º–æ–≥—É:")
    bot.send_message(message.from_user.id, "–í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    bot.send_message(message.from_user.id, "–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞")
    bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å—É")
    bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ /quit, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –Ω–æ–≤–æ–π")
    bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    bot.send_message(message.from_user.id,
                     "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    bot.send_message(message.from_user.id,
                     "–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1.3 —Å–µ–∫ –∏ –º–µ–Ω–µ–µ, —Ç–æ –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç!")
    bot.send_message(message.from_user.id,
                     "–ß—Ç–æ–±—ã —ç—Ç–æ–≥–æ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 3 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π")
    bot.send_message(message.from_user.id,
                     "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")


def prep_raspisanie(message):
    clas = ''.join(message.text.upper().split())
    clas = [clas[:-1], clas[-1]]
    raspisanie(message, clas)


def raspisanie(message, clas=None):
    days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê']

    db_sess = db_session.create_session()
    user_back = db_sess.query(User).filter(User.user_id == message.from_user.id).first()

    if datetime.datetime.today().weekday() > 4:
        bot.send_message(message.from_user.id, '–ë–æ—Ç –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ. –ò–¥–∏ –∫ –ú–≠–®-—É')
    else:
        date = days[datetime.datetime.today().weekday()]
        db_sess = db_session.create_session()
        lessons = []
        changes_made = db_sess.query(Changes).filter(Changes.class_letter == clas, Changes.day == date)
        all_changes = {}
        for change in changes_made:
            all_changes[change.lesson_pos] = change
        for row in db_sess.query(Lessons).filter(Lessons.class_letter == clas, Lessons.day == date):
            lesson = []
            if row.lesson_pos in all_changes.keys():
                lesson = [all_changes[row.lesson_pos].lesson_pos, all_changes[row.lesson_pos].lesson,
                          all_changes[row.lesson_pos].cabinet]
            else:
                lesson = [row.lesson_pos, row.lesson, row.cabinet]
            lessons.append(lesson)
        if lessons:
            bot.send_message(message.from_user.id, f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {clas} –Ω–∞ {date.lower()}',
                             reply_markup=start_keyboard(user_back.about))
            for row in lessons:
                if None not in row:
                    bot.send_message(message.from_user.id, '       '.join(row))
        else:
            bot.send_message(message.from_user.id, '–¢–∞–∫–æ–π –∫–ª–∞—Å—Å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')


def prep_raspisanie_control(message):
    days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê']
    date = message.text.upper().split()[0]
    if date not in days:
        bot.send_message(message.from_user.id, '–Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ')
    clas = ''.join(message.text.upper().split()[1:])
    clas = [clas[:-1], clas[-1]]
    raspisanie_control(message, clas, date)


def raspisanie_control(message, clas, date):
    date = date.upper()
    db_sess = db_session.create_session()
    lessons = []
    changes_made = db_sess.query(Changes).filter(Changes.class_letter == clas, Changes.day == date)
    all_changes = {}

    user_back = db_sess.query(User).filter(User.user_id == message.from_user.id).first()

    for change in changes_made:
        all_changes[change.lesson_pos] = change
    for row in db_sess.query(Lessons).filter(Lessons.class_letter == clas, Lessons.day == date).distinct():
        lesson = []
        if row.lesson_pos in all_changes.keys():
            lesson = [all_changes[row.lesson_pos].lesson_pos, all_changes[row.lesson_pos].lesson,
                      all_changes[row.lesson_pos].cabinet]
        else:
            lesson = [row.lesson_pos, row.lesson, row.cabinet]
        lessons.append(lesson)
    if lessons:
        bot.send_message(message.from_user.id, f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {clas} –Ω–∞ {date.lower()}',
                         reply_markup=start_keyboard(user_back.about))
        for row in lessons:
            if None not in row:
                bot.send_message(message.from_user.id, '       '.join(row))
    else:
        bot.send_message(message.from_user.id, '–¢–∞–∫–æ–π –∫–ª–∞—Å—Å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')


def prep_poisk(message):
    clas = ''.join(message.text.upper().split())
    poisk(clas, message)


# –ø—Ä–æ–±–ª–µ–º—ã –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ –º–µ—Ä–µ –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏
def poisk(clas, message):
    db_sess = db_session.create_session()
    days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê']
    if datetime.datetime.today().weekday() > 4:
        bot.send_message(message.from_user.id, '–í –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å')
    else:
        date = days[datetime.datetime.today().weekday()]
        print(clas)
        # –ø—Ä–æ–±–ª–µ–º–∞ ‚Ññ1 datetime.time.hour/minute –¥–∞–µ—Ç –ø—É—Å—Ç—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∞ –Ω–µ –Ω—ã–Ω–µ—à–Ω–µ–µ –≤—Ä–µ–º—è,
        # —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ç—ã –≤ if –Ω–∏–∂–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–ª —á—Ç–æ-—Ç–æ –Ω–∞ –ø–æ–¥–æ–±–∏–∏ –ø—É—Å—Ç–æ—Ç—ã —Å int
        hour_now, minute_now = int((str(dt.now()).split()[1].split(':'))[0]), int((str(dt.now()).split()[1].split(':'))[0])
        if hour_now >= 15 and minute_now >= 15:
            bot.send_message(message.from_user.id, '–£—Ä–æ–∫–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å')
        else:
            # –ø—Ä–æ–±–ª–µ–º–∞ ‚Ññ3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–∫–æ–≤, —Å–º–µ–Ω–∏–ª –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            # (–ø—Ä–µ–∂–Ω–∏–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–ª)
            if hour_now <= 9 and minute_now <= 15:
                lesson_pos = '1'
            elif hour_now <= 10 and minute_now <= 15:
                lesson_pos = '2'
            elif hour_now <= 11 and minute_now <= 20:
                lesson_pos = '3'
            elif hour_now <= 12 and minute_now <= 20:
                lesson_pos = '4'
            elif hour_now <= 13 and minute_now <= 20:
                lesson_pos = '5'
            elif hour_now <= 14 and minute_now <= 15:
                lesson_pos = '6'
            elif hour_now <= 15 and minute_now <= 10:
                lesson_pos = '7'
            else:
                # –ø—Ä–æ–±–ª–µ–º–∞ ‚Ññ4 (–Ω—É, –ø–æ—á—Ç–∏) –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–ª–∞—Å—Å–∞—Ö, –¥–∞–∂–µ –≤ 10 –∏ 11, –µ—Å—Ç—å 8 —É—Ä–æ–∫
                lesson_pos = '8'

            # –ø—Ä–æ–±–ª–µ–º–∞ ‚Ññ2, –¥–µ–ª–∞—è –∑–∞–ø—Ä–æ—Å –≤ –±–¥, —Ç–µ–±–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –¥–æ–ª–∂–µ–Ω "—Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å"
            # —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ .first() (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö, –ø–æ—ç—Ç–æ–º—É —è –Ω–∞–ø–∏—Å–∞–ª unpack())
            lesson = db_sess.query(Lessons).filter(Lessons.class_letter == clas,
                                                   Lessons.day == date,
                                                   Lessons.lesson_pos == lesson_pos).first()
            row = db_sess.query(Changes).filter(Changes.day == date,
                                                Changes.lesson_pos == lesson_pos,
                                                Changes.class_letter == clas).first()
            if row:
                bot.send_message(message.from_user.id, f'{clas} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ {row.cabinet} –∫–∞–±–∏–Ω–µ—Ç–µ')
            elif lesson:
                bot.send_message(message.from_user.id, f'{clas} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ {lesson.cabinet} –∫–∞–±–∏–Ω–µ—Ç–µ')
            else:
                bot.send_message(message.from_user.id, '–¢–∞–∫–æ–π –∫–ª–∞—Å—Å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')


# –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∑–∞ –∑–∞–≤—É—á–∞, –∫–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–ª —É—á–∏—Ç–µ–ª—è, –Ω–æ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
# —à–∞–Ω—Å—ã –±—É–¥—É—Ç –º–∞–ª—é—Å–µ–Ω—å–∫–∏–º–∏, —Ç–∞–∫ —á—Ç–æ –º–æ–∂–Ω–æ –Ω–µ —Ñ–∏–∫—Å–∏—Ç—å
def authorization(message, student=False):
    db_sess = db_session.create_session()
    user = User()
    if student:
        clas = message[1]
        user_id = message[0]
        user.user_id = user_id
        user.about = '—É—á–µ–Ω–∏–∫'
        user.user_key = clas
        usero = user.about
        db_sess.add(user)
        db_sess.commit()
        bot.send_message(user_id, '–≥–æ—Ç–æ–≤–æ', reply_markup=start_keyboard(usero))
    else:
        check = True
        user.user_id = message.from_user.id
        key = db_sess.query(Keys).filter(Keys.key_available == message.text)
        if unpack(key) and len(message.text) == 9:
            user.about = '–∑–∞–≤—É—á'
            user.user_key = message.text
        elif unpack(key) and len(message.text) == 7:
            user.about = '—É—á–∏—Ç–µ–ª—å'
            user.user_key = message.text
        else:
            check = False
        if check:
            usero = user.about
            db_sess.add(user)
            db_sess.commit()
            bot.send_message(message.from_user.id, '–≥–æ—Ç–æ–≤–æ', reply_markup=start_keyboard(usero))
        else:
            bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
            redo(message)


def prep_ismeneniya(message, args):
    cabinet, *lesson = message.text.split()
    ismeneniya(message, args[1], args[0], args[2], cabinet, ' '.join(lesson))


def ismeneniya(message, day, clas, number, cabinet, lesson):
    day = day.upper()
    db_sess = db_session.create_session()
    items = Changes()
    items.lesson_pos = number
    items.lesson = lesson
    items.cabinet = cabinet
    items.class_letter = clas
    items.day = day

    db_sess.add(items)
    db_sess.commit()
    title = db_sess.query(Changes).filter(Changes.lesson == lesson, Changes.day == day).first()
    if title:
        bot.send_message(message.from_user.id, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ')
    else:
        bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    users = db_sess.query(User).filter(User.user_key == clas).all()
    cou = 0
    for user in users:
        try:
            cou += 1
            bot.send_message(user.user_id, f'–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} –∏–∑–º–µ–Ω–∏–ª–æ—Å—å! –ò–∑–º–µ–Ω–µ–Ω {number} —É—Ä–æ–∫',
                             reply_markup=start_keyboard('–∑–∞–≤—É—á'))
        except Exception as e:
            cou -= 1
            print('error occured')
    bot.send_message(message.from_user.id, f'–£—á–µ–Ω–∏–∫–∏ –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö ({cou} —É—á–µ–Ω–∏–∫–∞–º(-—É))',
                     reply_markup=start_keyboard('–∑–∞–≤—É—á'))


def announce(message, args):
    db_sess = db_session.create_session()
    clas = args[1]
    things_to_announce = ' '.join(message.text)
    students = db_sess.query(User).filter(User.user_key == clas).all()
    cou = 0
    for student in students:
        try:
            cou += 1
            bot.send_message(student.user_id, things_to_announce,
                             reply_markup=start_keyboard(message.from_user.id))
        except Exception as e:
            cou -= 1
            print('error occured')
    bot.send_message(message.from_user.id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {cou} —É—á–µ–Ω–∏–∫–∞–º(-—É)',
                     reply_markup=start_keyboard(message.from_user.id))


# –Ω–µ –Ω—É–∂–Ω—ã–µ
'''def url(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç', url=link)
    markup.add(btn1)
    bot.send_message(message.from_user.id, "–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç", reply_markup=markup) '''