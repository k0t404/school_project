import telebot
import datetime
from con2 import BOT_TOKEN
from telebot import types
from data import db_session
from data.lesssons import Lesssons
from data.users import User
from data.changes import Changes
from data.keys import Keys

bot = telebot.TeleBot(BOT_TOKEN)


def start_keyboard(user_id=None):
    '''db_sess = db_session.create_session()
    authorized_user = db_sess.query(User).filter(User.user_id == user_id)'''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('–ß—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç?')
    btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_—É—Ä–æ–∫–æ–≤')
    btn3 = types.KeyboardButton('–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è')
    btn4 = types.KeyboardButton('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')
    btn5 = types.KeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
    btn6 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å—É')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    return markup


def start_keyboard_2(user_id=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('–ó–∞–≤—É—á')
    btn2 = types.KeyboardButton('–£—á–∏—Ç–µ–ª—å')
    btn3 = types.KeyboardButton('–£—á–µ–Ω–∏–∫')
    markup.add(btn1, btn2, btn3)
    return markup


def starts(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ê—Ä—Ç–µ–º, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!",
                     reply_markup=start_keyboard(message.from_user.id))


def search(message):
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=start_keyboard(message.from_user.id))


def question(message):
    bot.send_message(message.from_user.id, "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ –Ω–∞—à—É –ø–æ—á—Ç—É")
    bot.send_message(message.from_user.id, "cot5626@mail.ru", reply_markup=start_keyboard(message.from_user.id))


def helper(message):
    bot.send_message(message.from_user.id, "–Ø –±–æ—Ç –ê—Ä—Ç–µ–º.")
    bot.send_message(message.from_user.id, "–Ø –º–æ–≥—É:")
    bot.send_message(message.from_user.id, "–í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    bot.send_message(message.from_user.id, "–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞",
                     reply_markup=start_keyboard(message.from_user.id))


def raspisanie(message, clas=None, autharized_student=False):
    days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê']

    if autharized_student:
        clas = clas
    else:
        clas = f'{clas[0]} "{clas[1]}" –∫–ª–∞—Å—Å'

    if datetime.datetime.today().weekday() > 4 and datetime.datetime.today().weekday() == 40:
        bot.send_message(message.from_user.id, '–ë–æ—Ç –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ. –ò–¥–∏ –∫ –ú–≠–®-—É',
                         reply_markup=start_keyboard(message.from_user.id))
    else:
        date = days[0]
        '''date = days[datetime.datetime.today().weekday()]'''
        db_sess = db_session.create_session()
        lessons = []
        for row in db_sess.query(Lesssons).filter(Lesssons.class_letter == clas, Lesssons.day == date):
            lesson = [row.lesson_pos, row.lesson, row.cabinet, row.class_letter, row.day]
            lessons.append(lesson)
        if lessons:
            bot.send_message(message.from_user.id, f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {clas}',
                             reply_markup=start_keyboard(message.from_user.id))
            for row in lessons:
                if None not in row:
                    bot.send_message(message.from_user.id, '       '.join(row),
                                     reply_markup=start_keyboard(message.from_user.id))
        else:
            qu1_2 = bot.send_message(message.from_user.id, '–¢–∞–∫–æ–π –∫–ª–∞—Å—Å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞',
                             reply_markup=start_keyboard(message.from_user.id))


def prep_raspisanie(message):
    clas = ''.join(message.text.upper().split())
    clas = [clas[:-1], clas[-1]]
    raspisanie(message, clas)


def authorization(message):
    db_sess = db_session.create_session()
    user = User()
    user.user_id = message.from_user.id
    key = db_sess.query(Keys).filter(Keys.key_available == message.text)
    special_pass = False
    if key:
        special_pass = True
    clas = ''.join(message.text.upper().split())
    clas = [clas[:-1], clas[-1]]
    if special_pass and len(message.text) == 9:
        user.about = '–∑–∞–≤—É—á'
        user.user_key = message.text
    elif special_pass and len(message.text) == 7:
        user.about = '—É—á–∏—Ç–µ–ª—å'
        user.user_key = message.text
    elif len(clas) == 2:
        user.about = '—É—á–µ–Ω–∏–∫'
        user.user_key = f'{clas[0]} "{clas[1]}" –∫–ª–∞—Å—Å'
        print(f'{message.text[0]} "{message.text[1]}" –∫–ª–∞—Å—Å')
    db_sess.add(user)
    db_sess.commit()
    bot.send_message(message.from_user.id, '–≥–æ—Ç–æ–≤–æ', reply_markup=start_keyboard(message.from_user.id))


def prep_ismeneniya(message):
    clas, number, cabinet, lesson = message.text.split()
    ismeneniya(message, clas, number, cabinet, lesson)


def ismeneniya(message, clas, number, cabinet, lesson):
    days = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê']
    if datetime.datetime.today().weekday() > 4:
        bot.send_message(message.from_user.id, '–í –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                         reply_markup=start_keyboard(message.from_user.id))
    else:
        date = days[datetime.datetime.today().weekday()]
        clas = f'{clas[:-1]} "{clas[-1]}" –∫–ª–∞—Å—Å'
        print(clas)
        db_sess = db_session.create_session()
        items = Changes()
        items.lesson_pos = number
        items.lesson = lesson
        items.cabinet = cabinet
        items.class_letter = clas
        items.day = date

        db_sess.add(items)
        db_sess.commit()
        title = db_sess.query(Changes).filter(Changes.lesson == lesson, Changes.day == date).first()
        if title:
            bot.send_message(message.from_user.id, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ',
                             reply_markup=start_keyboard(message.from_user.id))
        else:
            bot.send_message(message.from_user.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                             reply_markup=start_keyboard(message.from_user.id))
        users = db_sess.query(User).filter(User.about == clas)
        for user in users:
            bot.send_message(user.user_id, f'–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date} –∏–∑–º–µ–Ω–∏–ª–æ—Å—å! –ò–∑–º–µ–Ω–µ–Ω {number} —É—Ä–æ–∫',
                             reply_markup=start_keyboard(message.from_user.id))
        bot.send_message(message.from_user.id, '–£—á–µ–Ω–∏–∫–∏ –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö',
                         reply_markup=start_keyboard(message.from_user.id))


def search_for(message):
    pass


def announce(message):
    db_sess = db_session.create_session()
    clas = message.text.split()[0]
    clas = f'{clas[:-1]} "{clas[-1]}" –∫–ª–∞—Å—Å'
    things_to_announce = ' '.join(message.text.split()[1:])
    students = db_sess.query(User).filter(User.user_key == clas)
    for student in students:
        bot.send_message(student.user_id, things_to_announce,
                         reply_markup=start_keyboard(message.from_user.id))
    bot.send_message(message.from_user.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                     reply_markup=start_keyboard(message.from_user.id))


# –Ω–µ –Ω—É–∂–Ω—ã–µ
'''def url(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç', url=link)
    markup.add(btn1)
    bot.send_message(message.from_user.id, "–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç", reply_markup=markup) '''